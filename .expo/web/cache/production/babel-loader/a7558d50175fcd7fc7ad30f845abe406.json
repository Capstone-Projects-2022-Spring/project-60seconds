{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import React,{useState}from\"react\";import ChevronLeftIcon from'@mui/icons-material/ChevronLeft';import ChevronRightIcon from'@mui/icons-material/ChevronRight';import{format,startOfWeek,addDays,startOfMonth,endOfMonth,endOfWeek,isSameMonth,isSameDay,subMonths,addMonths,isBefore}from\"date-fns\";import Container from\"@mui/material/Container\";import Box from'@mui/material/Box';import Day from\"../components/day\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function calendar(){var _useState=useState(new Date()),_useState2=_slicedToArray(_useState,2),selectedDate=_useState2[0],setSelectedDate=_useState2[1];var _useState3=useState(new Date()),_useState4=_slicedToArray(_useState3,2),activeDate=_useState4[0],setActiveDate=_useState4[1];var _useState5=useState(new Date()),_useState6=_slicedToArray(_useState5,2),data=_useState6[0],setData=_useState6[1];var parentToChild=function parentToChild(dateToSet){setData(dateToSet);};var getHeader=function getHeader(){return _jsxs(\"div\",{className:\"header\",children:[_jsx(\"div\",{className:\"todayButton\",onClick:function onClick(){setSelectedDate(new Date());setActiveDate(new Date());parentToChild(new Date());},children:\"Today\"}),_jsx(ChevronLeftIcon,{className:\"navIcon\",onClick:function onClick(){return setActiveDate(subMonths(activeDate,1));}}),_jsx(ChevronRightIcon,{className:\"navIcon\",onClick:function onClick(){return setActiveDate(addMonths(activeDate,1));}}),_jsx(\"h2\",{className:\"currentMonth\",children:format(activeDate,\"MMMM yyyy\")})]});};var getWeekDaysNames=function getWeekDaysNames(){var weekStartDate=startOfWeek(activeDate);var weekDays=[];for(var day=0;day<7;day++){weekDays.push(_jsx(\"div\",{className:\"day weekNames\",children:format(addDays(weekStartDate,day),\"E\")},day));}return _jsx(\"div\",{className:\"weekContainer\",children:weekDays});};var generateDatesForCurrentWeek=function generateDatesForCurrentWeek(date,selectedDate,activeDate){var currentDate=date;var week=[];var _loop=function _loop(day){var cloneDate=currentDate;week.push(_jsx(\"div\",{className:\"day \\n                        \"+(isSameMonth(currentDate,activeDate)?\"\":\"inactiveDay\")+\" \\n                        \"+(isSameDay(currentDate,selectedDate)?\"selectedDay\":\"\")+\"\\n                        \"+(isSameDay(currentDate,new Date())?\"today\":\"\")+\"}\",onClick:function onClick(){if(!isSameMonth(cloneDate,activeDate)){if(isBefore(cloneDate,activeDate)){setActiveDate(subMonths(activeDate,1));setSelectedDate(cloneDate);parentToChild(cloneDate);}else{setActiveDate(addMonths(activeDate,1));setSelectedDate(cloneDate);parentToChild(cloneDate);}}else{setSelectedDate(cloneDate);parentToChild(cloneDate);}},children:format(currentDate,\"d\")},currentDate));currentDate=addDays(currentDate,1);};for(var day=0;day<7;day++){_loop(day);}return _jsx(React.Fragment,{children:week},Math.random());};var getDates=function getDates(){var startOfTheSelectedMonth=startOfMonth(activeDate);var endOfTheSelectedMonth=endOfMonth(activeDate);var startDate=startOfWeek(startOfTheSelectedMonth);var endDate=endOfWeek(endOfTheSelectedMonth);var currentDate=startDate;var allWeeks=[];while(currentDate<=endDate){allWeeks.push(generateDatesForCurrentWeek(currentDate,selectedDate,activeDate));currentDate=addDays(currentDate,7);}return _jsx(\"div\",{className:\"weekContainer\",children:allWeeks});};return _jsx(\"div\",{className:\"calendar\",children:_jsxs(Box,{sx:{flexDirection:\"row\",display:\"flex\",alignItems:'center'},children:[_jsxs(Container,{maxWidth:\"md\",children:[getHeader(),getWeekDaysNames(),getDates()]}),_jsx(Day,{parentToChild:data})]})});}","map":{"version":3,"sources":["/home/ubuntu/project-60seconds/components/CalendarComponent.js"],"names":["React","useState","ChevronLeftIcon","ChevronRightIcon","format","startOfWeek","addDays","startOfMonth","endOfMonth","endOfWeek","isSameMonth","isSameDay","subMonths","addMonths","isBefore","Container","Box","Day","calendar","Date","selectedDate","setSelectedDate","activeDate","setActiveDate","data","setData","parentToChild","dateToSet","getHeader","getWeekDaysNames","weekStartDate","weekDays","day","push","generateDatesForCurrentWeek","date","currentDate","week","cloneDate","Math","random","getDates","startOfTheSelectedMonth","endOfTheSelectedMonth","startDate","endDate","allWeeks","flexDirection","display","alignItems"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { format, startOfWeek, addDays, startOfMonth, endOfMonth, endOfWeek, isSameMonth, isSameDay, subMonths, addMonths, isBefore } from \"date-fns\";\nimport Container from \"@mui/material/Container\";\nimport Box from '@mui/material/Box'\nimport Day from '../components/day';\n\nexport default function calendar() {\n\n    const [selectedDate, setSelectedDate] = useState(new Date());\n    const [activeDate, setActiveDate] = useState(new Date())\n    const [data, setData] = useState(new Date());\n\n    const parentToChild = (dateToSet) => {\n        setData(dateToSet);\n    }\n\n    const getHeader = () => {\n        return (\n            <div className=\"header\">\n                <div \n                    className=\"todayButton\"\n                    onClick={() => {\n                        setSelectedDate(new Date());\n                        setActiveDate(new Date());\n                        parentToChild(new Date());\n                    }}\n                >Today\n                </div>\n                <ChevronLeftIcon \n                    className=\"navIcon\"\n                    onClick={() => setActiveDate(subMonths(activeDate, 1))}\n                />\n                <ChevronRightIcon \n                    className=\"navIcon\"\n                    onClick={() => setActiveDate(addMonths(activeDate, 1))}\n                />\n                <h2 className=\"currentMonth\">{format(activeDate, \"MMMM yyyy\")}</h2>\n            </div>\n        )\n    };\n    const getWeekDaysNames = () => {\n        const weekStartDate = startOfWeek(activeDate);\n        const weekDays = [];\n        for(let day = 0; day < 7; day++){\n            weekDays.push(\n                <div className=\"day weekNames\" key={day}>\n                    {format(addDays(weekStartDate, day), \"E\")}\n                </div>\n            )\n        }\n        return <div className=\"weekContainer\">{weekDays}</div>\n    };\n\n    const generateDatesForCurrentWeek = (date, selectedDate, activeDate) => {\n        let currentDate = date;\n        const week = [];\n        for(let day = 0; day < 7; day++){\n            const cloneDate = currentDate;\n            week.push(\n                <div key={currentDate}\n                    className={`day \n                        ${isSameMonth(currentDate, activeDate) ? \"\" : \"inactiveDay\"} \n                        ${isSameDay(currentDate, selectedDate) ? \"selectedDay\" : \"\"}\n                        ${isSameDay(currentDate, new Date()) ? \"today\" : \"\"}}`}\n                    onClick={() => {\n                        //if new selected date is not in current month displayed\n                        if(!isSameMonth(cloneDate, activeDate)){\n                            if(isBefore(cloneDate, activeDate)){\n                                //if selected date is from previous month\n                                setActiveDate(subMonths(activeDate, 1));\n                                setSelectedDate(cloneDate);\n                                //console.log(cloneDate);\n                                parentToChild(cloneDate);\n                            } else {\n                                //if selected date is from next month\n                                setActiveDate(addMonths(activeDate, 1));\n                                setSelectedDate(cloneDate);\n                                //console.log(cloneDate);\n                                parentToChild(cloneDate);\n                            }\n                        } else {\n                            //if selected date is in current month\n                            setSelectedDate(cloneDate);\n                            //console.log(cloneDate);\n                            parentToChild(cloneDate);\n                        }\n                    }}  \n                >\n                    {format(currentDate, \"d\")}\n                </div>\n            );\n            currentDate = addDays(currentDate, 1);\n        }\n        return <React.Fragment key={Math.random() /*temporary key*/}>{week}</React.Fragment>;\n    }\n\n    const getDates = () => {\n        const startOfTheSelectedMonth = startOfMonth(activeDate);\n        const endOfTheSelectedMonth = endOfMonth(activeDate);\n        const startDate = startOfWeek(startOfTheSelectedMonth);\n        const endDate = endOfWeek(endOfTheSelectedMonth);\n        \n        let currentDate = startDate;\n\n        const allWeeks = [];\n\n        while(currentDate<=endDate){\n            allWeeks.push(generateDatesForCurrentWeek(currentDate, selectedDate, activeDate));\n            currentDate = addDays(currentDate, 7);\n        }\n\n        return <div className=\"weekContainer\">{allWeeks}</div>\n    };\n\n    return(\n        <div className=\"calendar\">\n            <Box sx={{\n                flexDirection: \"row\",\n                display: \"flex\", \n                alignItems: 'center'\n            }}>\n                <Container maxWidth=\"md\">\n                    {getHeader()}\n                    {getWeekDaysNames()}\n                    {getDates()}\n                </Container>\n                <Day parentToChild={data}/>\n            </Box>\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}