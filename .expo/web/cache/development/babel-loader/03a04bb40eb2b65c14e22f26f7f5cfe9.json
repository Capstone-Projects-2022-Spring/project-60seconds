{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport { format, startOfWeek, addDays, startOfMonth, endOfMonth, endOfWeek, isSameMonth, isSameDay, subMonths, addMonths, isBefore } from \"date-fns\";\nimport Container from \"@mui/material/Container\";\nimport Box from '@mui/material/Box';\nimport Day from \"../components/day\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function calendar() {\n  var _useState = useState(new Date()),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedDate = _useState2[0],\n      setSelectedDate = _useState2[1];\n\n  var _useState3 = useState(new Date()),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeDate = _useState4[0],\n      setActiveDate = _useState4[1];\n\n  var _useState5 = useState(new Date()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      data = _useState6[0],\n      setData = _useState6[1];\n\n  var parentToChild = function parentToChild(dateToSet) {\n    setData(dateToSet);\n  };\n\n  var getHeader = function getHeader() {\n    return _jsxs(\"div\", {\n      className: \"header\",\n      children: [_jsx(\"div\", {\n        className: \"todayButton\",\n        onClick: function onClick() {\n          setSelectedDate(new Date());\n          setActiveDate(new Date());\n          parentToChild(new Date());\n        },\n        children: \"Today\"\n      }), _jsx(ChevronLeftIcon, {\n        className: \"navIcon\",\n        onClick: function onClick() {\n          return setActiveDate(subMonths(activeDate, 1));\n        }\n      }), _jsx(ChevronRightIcon, {\n        className: \"navIcon\",\n        onClick: function onClick() {\n          return setActiveDate(addMonths(activeDate, 1));\n        }\n      }), _jsx(\"h2\", {\n        className: \"currentMonth\",\n        children: format(activeDate, \"MMMM yyyy\")\n      })]\n    });\n  };\n\n  var getWeekDaysNames = function getWeekDaysNames() {\n    var weekStartDate = startOfWeek(activeDate);\n    var weekDays = [];\n\n    for (var day = 0; day < 7; day++) {\n      weekDays.push(_jsx(\"div\", {\n        className: \"day weekNames\",\n        children: format(addDays(weekStartDate, day), \"E\")\n      }, day));\n    }\n\n    return _jsx(\"div\", {\n      className: \"weekContainer\",\n      children: weekDays\n    });\n  };\n\n  var generateDatesForCurrentWeek = function generateDatesForCurrentWeek(date, selectedDate, activeDate) {\n    var currentDate = date;\n    var week = [];\n\n    var _loop = function _loop(day) {\n      var cloneDate = currentDate;\n      week.push(_jsx(\"div\", {\n        className: \"day \\n                        \" + (isSameMonth(currentDate, activeDate) ? \"\" : \"inactiveDay\") + \" \\n                        \" + (isSameDay(currentDate, selectedDate) ? \"selectedDay\" : \"\") + \"\\n                        \" + (isSameDay(currentDate, new Date()) ? \"today\" : \"\") + \"}\",\n        onClick: function onClick() {\n          if (!isSameMonth(cloneDate, activeDate)) {\n            if (isBefore(cloneDate, activeDate)) {\n              setActiveDate(subMonths(activeDate, 1));\n              setSelectedDate(cloneDate);\n              parentToChild(cloneDate);\n            } else {\n              setActiveDate(addMonths(activeDate, 1));\n              setSelectedDate(cloneDate);\n              parentToChild(cloneDate);\n            }\n          } else {\n            setSelectedDate(cloneDate);\n            parentToChild(cloneDate);\n          }\n        },\n        children: format(currentDate, \"d\")\n      }, currentDate));\n      currentDate = addDays(currentDate, 1);\n    };\n\n    for (var day = 0; day < 7; day++) {\n      _loop(day);\n    }\n\n    return _jsx(React.Fragment, {\n      children: week\n    }, Math.random());\n  };\n\n  var getDates = function getDates() {\n    var startOfTheSelectedMonth = startOfMonth(activeDate);\n    var endOfTheSelectedMonth = endOfMonth(activeDate);\n    var startDate = startOfWeek(startOfTheSelectedMonth);\n    var endDate = endOfWeek(endOfTheSelectedMonth);\n    var currentDate = startDate;\n    var allWeeks = [];\n\n    while (currentDate <= endDate) {\n      allWeeks.push(generateDatesForCurrentWeek(currentDate, selectedDate, activeDate));\n      currentDate = addDays(currentDate, 7);\n    }\n\n    return _jsx(\"div\", {\n      className: \"weekContainer\",\n      children: allWeeks\n    });\n  };\n\n  return _jsx(\"div\", {\n    className: \"calendar\",\n    children: _jsxs(Box, {\n      sx: {\n        flexDirection: \"row\",\n        display: \"flex\",\n        alignItems: 'center'\n      },\n      children: [_jsxs(Container, {\n        maxWidth: \"md\",\n        children: [getHeader(), getWeekDaysNames(), getDates()]\n      }), _jsx(Day, {\n        parentToChild: data\n      })]\n    })\n  });\n}","map":{"version":3,"sources":["C:/Users/Sam Sepial/WebstormProjects/project-60seconds/components/CalendarComponent.js"],"names":["React","useState","ChevronLeftIcon","ChevronRightIcon","format","startOfWeek","addDays","startOfMonth","endOfMonth","endOfWeek","isSameMonth","isSameDay","subMonths","addMonths","isBefore","Container","Box","Day","calendar","Date","selectedDate","setSelectedDate","activeDate","setActiveDate","data","setData","parentToChild","dateToSet","getHeader","getWeekDaysNames","weekStartDate","weekDays","day","push","generateDatesForCurrentWeek","date","currentDate","week","cloneDate","Math","random","getDates","startOfTheSelectedMonth","endOfTheSelectedMonth","startDate","endDate","allWeeks","flexDirection","display","alignItems"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport { format, startOfWeek, addDays, startOfMonth, endOfMonth, endOfWeek, isSameMonth, isSameDay, subMonths, addMonths, isBefore } from \"date-fns\";\r\nimport Container from \"@mui/material/Container\";\r\nimport Box from '@mui/material/Box'\r\nimport Day from '../components/day';\r\n\r\nexport default function calendar() {\r\n\r\n    const [selectedDate, setSelectedDate] = useState(new Date());\r\n    const [activeDate, setActiveDate] = useState(new Date())\r\n    const [data, setData] = useState(new Date());\r\n\r\n    const parentToChild = (dateToSet) => {\r\n        setData(dateToSet);\r\n    }\r\n\r\n    const getHeader = () => {\r\n        return (\r\n            <div className=\"header\">\r\n                <div \r\n                    className=\"todayButton\"\r\n                    onClick={() => {\r\n                        setSelectedDate(new Date());\r\n                        setActiveDate(new Date());\r\n                        parentToChild(new Date());\r\n                    }}\r\n                >Today\r\n                </div>\r\n                <ChevronLeftIcon \r\n                    className=\"navIcon\"\r\n                    onClick={() => setActiveDate(subMonths(activeDate, 1))}\r\n                />\r\n                <ChevronRightIcon \r\n                    className=\"navIcon\"\r\n                    onClick={() => setActiveDate(addMonths(activeDate, 1))}\r\n                />\r\n                <h2 className=\"currentMonth\">{format(activeDate, \"MMMM yyyy\")}</h2>\r\n            </div>\r\n        )\r\n    };\r\n    const getWeekDaysNames = () => {\r\n        const weekStartDate = startOfWeek(activeDate);\r\n        const weekDays = [];\r\n        for(let day = 0; day < 7; day++){\r\n            weekDays.push(\r\n                <div className=\"day weekNames\" key={day}>\r\n                    {format(addDays(weekStartDate, day), \"E\")}\r\n                </div>\r\n            )\r\n        }\r\n        return <div className=\"weekContainer\">{weekDays}</div>\r\n    };\r\n\r\n    const generateDatesForCurrentWeek = (date, selectedDate, activeDate) => {\r\n        let currentDate = date;\r\n        const week = [];\r\n        for(let day = 0; day < 7; day++){\r\n            const cloneDate = currentDate;\r\n            week.push(\r\n                <div key={currentDate}\r\n                    className={`day \r\n                        ${isSameMonth(currentDate, activeDate) ? \"\" : \"inactiveDay\"} \r\n                        ${isSameDay(currentDate, selectedDate) ? \"selectedDay\" : \"\"}\r\n                        ${isSameDay(currentDate, new Date()) ? \"today\" : \"\"}}`}\r\n                    onClick={() => {\r\n                        //if new selected date is not in current month displayed\r\n                        if(!isSameMonth(cloneDate, activeDate)){\r\n                            if(isBefore(cloneDate, activeDate)){\r\n                                //if selected date is from previous month\r\n                                setActiveDate(subMonths(activeDate, 1));\r\n                                setSelectedDate(cloneDate);\r\n                                //console.log(cloneDate);\r\n                                parentToChild(cloneDate);\r\n                            } else {\r\n                                //if selected date is from next month\r\n                                setActiveDate(addMonths(activeDate, 1));\r\n                                setSelectedDate(cloneDate);\r\n                                //console.log(cloneDate);\r\n                                parentToChild(cloneDate);\r\n                            }\r\n                        } else {\r\n                            //if selected date is in current month\r\n                            setSelectedDate(cloneDate);\r\n                            //console.log(cloneDate);\r\n                            parentToChild(cloneDate);\r\n                        }\r\n                    }}  \r\n                >\r\n                    {format(currentDate, \"d\")}\r\n                </div>\r\n            );\r\n            currentDate = addDays(currentDate, 1);\r\n        }\r\n        return <React.Fragment key={Math.random() /*temporary key*/}>{week}</React.Fragment>;\r\n    }\r\n\r\n    const getDates = () => {\r\n        const startOfTheSelectedMonth = startOfMonth(activeDate);\r\n        const endOfTheSelectedMonth = endOfMonth(activeDate);\r\n        const startDate = startOfWeek(startOfTheSelectedMonth);\r\n        const endDate = endOfWeek(endOfTheSelectedMonth);\r\n        \r\n        let currentDate = startDate;\r\n\r\n        const allWeeks = [];\r\n\r\n        while(currentDate<=endDate){\r\n            allWeeks.push(generateDatesForCurrentWeek(currentDate, selectedDate, activeDate));\r\n            currentDate = addDays(currentDate, 7);\r\n        }\r\n\r\n        return <div className=\"weekContainer\">{allWeeks}</div>\r\n    };\r\n\r\n    return(\r\n        <div className=\"calendar\">\r\n            <Box sx={{\r\n                flexDirection: \"row\",\r\n                display: \"flex\", \r\n                alignItems: 'center'\r\n            }}>\r\n                <Container maxWidth=\"md\">\r\n                    {getHeader()}\r\n                    {getWeekDaysNames()}\r\n                    {getDates()}\r\n                </Container>\r\n                <Day parentToChild={data}/>\r\n            </Box>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}