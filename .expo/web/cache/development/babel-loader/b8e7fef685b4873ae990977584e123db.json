{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Audio } from 'expo-av';\nimport * as React from 'react';\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport { Recording } from 'expo-av/build/Audio';\nimport { StatusBar } from 'expo-status-bar';\nimport axios from 'axios';\nimport { duration } from '@mui/material';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\naxios.defaults.withCredentials = true;\nexport default function recorder() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      recording = _React$useState2[0],\n      setRecording = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      recordings = _React$useState4[0],\n      setRecordings = _React$useState4[1];\n\n  function startRecording() {\n    var _await$Audio$Recordin, _recording;\n\n    return _regeneratorRuntime.async(function startRecording$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('Requesting permissions..');\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Audio.requestPermissionsAsync());\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n              allowsRecordingIOS: true,\n              playsInSilentModeIOS: true\n            }));\n\n          case 6:\n            console.log('Starting recording..');\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Audio.Recording.createAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY));\n\n          case 9:\n            _await$Audio$Recordin = _context.sent;\n            _recording = _await$Audio$Recordin.recording;\n            setRecording(_recording);\n            console.log('Recording started');\n            startTranscribe();\n            _context.next = 19;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Failed to start recording', _context.t0);\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 16]], Promise);\n  }\n\n  function sendToServer(recording, username) {\n    var fileName, blobToFile, audioURI, audioBlob, audioFile, uploadData, apiUploadPath;\n    return _regeneratorRuntime.async(function sendToServer$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            fileName = '60seconds-audio.mp3';\n\n            blobToFile = function blobToFile(blob, fileName) {\n              var file = new File([blob], fileName, {\n                type: blob.type\n              });\n              return file;\n            };\n\n            audioURI = recording.getURI();\n            _context2.next = 5;\n            return _regeneratorRuntime.awrap(fetch(audioURI).then(function (r) {\n              return r.blob();\n            }));\n\n          case 5:\n            audioBlob = _context2.sent;\n            audioFile = blobToFile(audioBlob, fileName);\n            uploadData = new FormData();\n            uploadData.append('username', username);\n            uploadData.append('audio', audioFile);\n            apiUploadPath = 'https://api.60seconds.io/api/upload';\n            axios.post(apiUploadPath, uploadData);\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function stopRecording() {\n    var updatedRecordings, _await$recording$crea, sound, status, failureCallback, user;\n\n    return _regeneratorRuntime.async(function stopRecording$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            failureCallback = function _failureCallback(error) {\n              console.error(\"Error generating audio file: \" + error);\n            };\n\n            updatedRecordings = _toConsumableArray(recordings);\n            console.log('Stopping recording..');\n            setRecording(undefined);\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(recording.stopAndUnloadAsync());\n\n          case 6:\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(recording.createNewLoadedSoundAsync());\n\n          case 8:\n            _await$recording$crea = _context3.sent;\n            sound = _await$recording$crea.sound;\n            status = _await$recording$crea.status;\n            recording.getStatusAsync().then(function (result) {\n              console.log(\"The duration is: \" + result.durationMillis);\n              updatedRecordings.push({\n                sound: sound,\n                duration: getDurationFormatted(result.durationMillis),\n                file: recording.getURI()\n              });\n            }).catch(failureCallback);\n            setRecordings(updatedRecordings);\n            _context3.next = 15;\n            return _regeneratorRuntime.awrap(axios.get('https://api.60seconds.io/api/user'));\n\n          case 15:\n            user = _context3.sent;\n            sendToServer(recording, user.data.username);\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getDurationFormatted(millis) {\n    console.log(\"FORMATTING...\" + millis);\n    var minutes = millis / 1000 / 60;\n    var minutesDisplay = Math.floor(minutes);\n    var seconds = Math.round((minutes - minutesDisplay) * 60);\n    var secondsDisplay = seconds < 10 ? \"0\" + seconds : seconds;\n    var formattedDuration = minutesDisplay + \":\" + secondsDisplay;\n    return formattedDuration;\n  }\n\n  function getRecordingLines() {\n    return recordings.map(function (recordingLine, index) {\n      return _jsxs(View, {\n        style: StyleSheet.row,\n        children: [_jsxs(Text, {\n          style: styles.fill,\n          children: [\"Recording \", index + 1, \" - \", recordingLine.duration]\n        }), _jsx(Button, {\n          style: styles.button,\n          onPress: function onPress() {\n            return recordingLine.sound.replayAsync();\n          },\n          title: \"Play\"\n        })]\n      }, index);\n    });\n  }\n\n  function startTranscribe() {\n    var transcription = '';\n  }\n\n  return _jsx(Container, {\n    component: \"main\",\n    maxWidth: \"sm\",\n    children: _jsxs(Box, {\n      sx: {\n        marginTop: 8,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [_jsx(Button, {\n        title: recording ? 'Stop Recording' : 'Start Recording',\n        onPress: recording ? stopRecording : startRecording,\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n          mt: 3,\n          mb: 2\n        }\n      }), getRecordingLines(), _jsx(\"h1\", {\n        children: \"Text To Speech\"\n      }), _jsx(\"div\", {\n        className: \"words\",\n        contentEditable: true,\n        children: _jsx(\"p\", {\n          id: \"p\"\n        })\n      })]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    flex: 1,\n    margin: 1\n  },\n  button: {\n    margin: 16\n  }\n});","map":{"version":3,"sources":["C:/Users/Sam Sepial/WebstormProjects/project-60seconds/components/recorder.js"],"names":["Audio","React","Box","Container","Recording","StatusBar","axios","duration","defaults","withCredentials","recorder","useState","recording","setRecording","recordings","setRecordings","startRecording","console","log","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","createAsync","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","startTranscribe","error","sendToServer","username","fileName","blobToFile","blob","file","File","type","audioURI","getURI","fetch","then","r","audioBlob","audioFile","uploadData","FormData","append","apiUploadPath","post","stopRecording","failureCallback","updatedRecordings","undefined","stopAndUnloadAsync","createNewLoadedSoundAsync","sound","status","getStatusAsync","result","durationMillis","push","getDurationFormatted","catch","get","user","data","millis","minutes","minutesDisplay","Math","floor","seconds","round","secondsDisplay","formattedDuration","getRecordingLines","map","recordingLine","index","StyleSheet","row","styles","fill","button","replayAsync","transcription","marginTop","display","flexDirection","alignItems","mt","mb","create","container","flex","backgroundColor","justifyContent","margin"],"mappings":";;;;;;;AACA,SAASA,KAAT,QAAsB,SAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,SAAT,QAA0B,iBAA1B;AAEA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,eAAzB;;;AAEAD,KAAK,CAACE,QAAN,CAAeC,eAAf,GAAiC,IAAjC;AAEA,eAAe,SAASC,QAAT,GAAoB;AAElC,wBAAkCT,KAAK,CAACU,QAAN,EAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,yBAAoCZ,KAAK,CAACU,QAAN,CAAe,EAAf,CAApC;AAAA;AAAA,MAAOG,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,WAAeC,cAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEEC,YAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AAFF;AAAA,6CAGQlB,KAAK,CAACmB,uBAAN,EAHR;;AAAA;AAAA;AAAA,6CAIQnB,KAAK,CAACoB,iBAAN,CAAwB;AAC7BC,cAAAA,kBAAkB,EAAE,IADS;AAE7BC,cAAAA,oBAAoB,EAAE;AAFO,aAAxB,CAJR;;AAAA;AAQEL,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AARF;AAAA,6CAS8BlB,KAAK,CAACI,SAAN,CAAgBmB,WAAhB,CAC3BvB,KAAK,CAACwB,qCADqB,CAT9B;;AAAA;AAAA;AASUZ,YAAAA,UATV,yBASUA,SATV;AAYEC,YAAAA,YAAY,CAACD,UAAD,CAAZ;AACAK,YAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACAO,YAAAA,eAAe;AAdjB;AAAA;;AAAA;AAAA;AAAA;AAgBER,YAAAA,OAAO,CAACS,KAAR,CAAc,2BAAd;;AAhBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAoBA,WAAeC,YAAf,CAA4Bf,SAA5B,EAAuCgB,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AACOC,YAAAA,QADP,GACkB,qBADlB;;AAIKC,YAAAA,UAJL,GAIkB,SAAbA,UAAa,CAAUC,IAAV,EAAgBF,QAAhB,EAA0B;AAC1C,kBAAMG,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACF,IAAD,CAAT,EAAiBF,QAAjB,EAA2B;AAAEK,gBAAAA,IAAI,EAAEH,IAAI,CAACG;AAAb,eAA3B,CAAb;AAEA,qBAAOF,IAAP;AACA,aARF;;AAWKG,YAAAA,QAXL,GAWgBvB,SAAS,CAACwB,MAAV,EAXhB;AAAA;AAAA,6CAcuBC,KAAK,CAACF,QAAD,CAAL,CAAgBG,IAAhB,CAAqB,UAAAC,CAAC;AAAA,qBAAIA,CAAC,CAACR,IAAF,EAAJ;AAAA,aAAtB,CAdvB;;AAAA;AAcKS,YAAAA,SAdL;AAiBKC,YAAAA,SAjBL,GAiBiBX,UAAU,CAACU,SAAD,EAAYX,QAAZ,CAjB3B;AAmBKa,YAAAA,UAnBL,GAmBkB,IAAIC,QAAJ,EAnBlB;AAoBCD,YAAAA,UAAU,CAACE,MAAX,CAAkB,UAAlB,EAA8BhB,QAA9B;AACAc,YAAAA,UAAU,CAACE,MAAX,CAAkB,OAAlB,EAA2BH,SAA3B;AAEII,YAAAA,aAvBL,GAuBqB,qCAvBrB;AAwBCvC,YAAAA,KAAK,CAACwC,IAAN,CAAWD,aAAX,EAA0BH,UAA1B;;AAxBD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA2BA,WAAeK,aAAf;AAAA,iEAoBUC,eApBV;;AAAA;AAAA;AAAA;AAAA;AAoBUA,YAAAA,eApBV,6BAoB0BtB,KApB1B,EAoBiC;AAC/BT,cAAAA,OAAO,CAACS,KAAR,CAAc,kCAAkCA,KAAhD;AACA,aAtBF;;AAEKuB,YAAAA,iBAFL,sBAE6BnC,UAF7B;AAICG,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACAL,YAAAA,YAAY,CAACqC,SAAD,CAAZ;AALD;AAAA,6CAMOtC,SAAS,CAACuC,kBAAV,EANP;;AAAA;AAAA;AAAA,6CAOiCvC,SAAS,CAACwC,yBAAV,EAPjC;;AAAA;AAAA;AAOSC,YAAAA,KAPT,yBAOSA,KAPT;AAOgBC,YAAAA,MAPhB,yBAOgBA,MAPhB;AASC1C,YAAAA,SAAS,CAAC2C,cAAV,GACEjB,IADF,CACO,UAAUkB,MAAV,EAAkB;AACvBvC,cAAAA,OAAO,CAACC,GAAR,CAAY,sBAAsBsC,MAAM,CAACC,cAAzC;AACAR,cAAAA,iBAAiB,CAACS,IAAlB,CAAuB;AACtBL,gBAAAA,KAAK,EAAEA,KADe;AAEtB9C,gBAAAA,QAAQ,EAAEoD,oBAAoB,CAACH,MAAM,CAACC,cAAR,CAFR;AAGtBzB,gBAAAA,IAAI,EAAEpB,SAAS,CAACwB,MAAV;AAHgB,eAAvB;AAKA,aARF,EASEwB,KATF,CASQZ,eATR;AAiBAjC,YAAAA,aAAa,CAACkC,iBAAD,CAAb;AA1BD;AAAA,6CA6BkB3C,KAAK,CAACuD,GAAN,CAAU,mCAAV,CA7BlB;;AAAA;AA6BKC,YAAAA,IA7BL;AA8BCnC,YAAAA,YAAY,CAACf,SAAD,EAAYkD,IAAI,CAACC,IAAL,CAAUnC,QAAtB,CAAZ;;AA9BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiCA,WAAS+B,oBAAT,CAA8BK,MAA9B,EAAsC;AACrC/C,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAkB8C,MAA9B;AACA,QAAMC,OAAO,GAAGD,MAAM,GAAG,IAAT,GAAgB,EAAhC;AACA,QAAME,cAAc,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAvB;AACA,QAAMI,OAAO,GAAGF,IAAI,CAACG,KAAL,CAAW,CAACL,OAAO,GAAGC,cAAX,IAA6B,EAAxC,CAAhB;AACA,QAAMK,cAAc,GAAGF,OAAO,GAAG,EAAV,SAAmBA,OAAnB,GAA+BA,OAAtD;AACA,QAAIG,iBAAiB,GAAMN,cAAN,SAAwBK,cAA7C;AACA,WAAOC,iBAAP;AACA;;AAED,WAASC,iBAAT,GAA6B;AAC5B,WAAO3D,UAAU,CAAC4D,GAAX,CAAe,UAACC,aAAD,EAAgBC,KAAhB,EAA0B;AAC/C,aACC,MAAC,IAAD;AAAkB,QAAA,KAAK,EAAEC,UAAU,CAACC,GAApC;AAAA,mBACC,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEC,MAAM,CAACC,IAApB;AAAA,mCAAqCJ,KAAK,GAAG,CAA7C,SAAmDD,aAAa,CAACpE,QAAjE;AAAA,UADD,EAEC,KAAC,MAAD;AAAQ,UAAA,KAAK,EAAEwE,MAAM,CAACE,MAAtB;AAA8B,UAAA,OAAO,EAAE;AAAA,mBAAMN,aAAa,CAACtB,KAAd,CAAoB6B,WAApB,EAAN;AAAA,WAAvC;AAAgF,UAAA,KAAK,EAAC;AAAtF,UAFD;AAAA,SAAWN,KAAX,CADD;AAMA,KAPM,CAAP;AAQA;;AAED,WAASnD,eAAT,GAA2B;AAC1B,QAAI0D,aAAa,GAAG,EAApB;AACA;;AAED,SACC,KAAC,SAAD;AAAW,IAAA,SAAS,EAAC,MAArB;AAA4B,IAAA,QAAQ,EAAC,IAArC;AAAA,cACC,MAAC,GAAD;AACC,MAAA,EAAE,EAAE;AACHC,QAAAA,SAAS,EAAE,CADR;AAEHC,QAAAA,OAAO,EAAE,MAFN;AAGHC,QAAAA,aAAa,EAAE,QAHZ;AAIHC,QAAAA,UAAU,EAAE;AAJT,OADL;AAAA,iBAOC,KAAC,MAAD;AACC,QAAA,KAAK,EAAE3E,SAAS,GAAG,gBAAH,GAAsB,iBADvC;AAEC,QAAA,OAAO,EAAEA,SAAS,GAAGmC,aAAH,GAAmB/B,cAFtC;AAGC,QAAA,IAAI,EAAC,QAHN;AAIC,QAAA,SAAS,MAJV;AAKC,QAAA,OAAO,EAAC,WALT;AAMC,QAAA,EAAE,EAAE;AAAEwE,UAAAA,EAAE,EAAE,CAAN;AAASC,UAAAA,EAAE,EAAE;AAAb;AANL,QAPD,EAeEhB,iBAAiB,EAfnB,EAgBC;AAAA;AAAA,QAhBD,EAiBC;AAAK,QAAA,SAAS,EAAC,OAAf;AAAuB,QAAA,eAAe,MAAtC;AAAA,kBACC;AAAG,UAAA,EAAE,EAAC;AAAN;AADD,QAjBD;AAAA;AADD,IADD;AA0BA;AAED,IAAMM,MAAM,GAAGF,UAAU,CAACa,MAAX,CAAkB;AAChCC,EAAAA,SAAS,EAAE;AACVC,IAAAA,IAAI,EAAE,CADI;AAEVC,IAAAA,eAAe,EAAE,MAFP;AAGVN,IAAAA,UAAU,EAAE,QAHF;AAIVO,IAAAA,cAAc,EAAE;AAJN,GADqB;AAOhChB,EAAAA,GAAG,EAAE;AACJQ,IAAAA,aAAa,EAAE,KADX;AAEJC,IAAAA,UAAU,EAAE,QAFR;AAGJO,IAAAA,cAAc,EAAE;AAHZ,GAP2B;AAYhCd,EAAAA,IAAI,EAAE;AACLY,IAAAA,IAAI,EAAE,CADD;AAELG,IAAAA,MAAM,EAAE;AAFH,GAZ0B;AAgBhCd,EAAAA,MAAM,EAAE;AACPc,IAAAA,MAAM,EAAE;AADD;AAhBwB,CAAlB,CAAf","sourcesContent":["import { Button, StyleSheet, Text, View } from 'react-native';\r\nimport { Audio } from 'expo-av';\r\nimport * as React from 'react';\r\nimport Box from \"@mui/material/Box\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { Recording } from 'expo-av/build/Audio';\r\nimport { StatusBar } from 'expo-status-bar';\r\n\r\nimport axios from 'axios';\r\nimport { duration } from '@mui/material';\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nexport default function recorder() {\r\n\r\n\tconst [recording, setRecording] = React.useState();\r\n\tconst [recordings, setRecordings] = React.useState([]);\r\n\r\n\tasync function startRecording() {\r\n\t\ttry {\r\n\t\t\tconsole.log('Requesting permissions..');\r\n\t\t\tawait Audio.requestPermissionsAsync();\r\n\t\t\tawait Audio.setAudioModeAsync({\r\n\t\t\t\tallowsRecordingIOS: true,\r\n\t\t\t\tplaysInSilentModeIOS: true,\r\n\t\t\t});\r\n\t\t\tconsole.log('Starting recording..');\r\n\t\t\tconst { recording } = await Audio.Recording.createAsync(\r\n\t\t\t\tAudio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\r\n\t\t\t);\r\n\t\t\tsetRecording(recording);\r\n\t\t\tconsole.log('Recording started');\r\n\t\t\tstartTranscribe();\r\n\t\t} catch (err) {\r\n\t\t\tconsole.error('Failed to start recording', err);\r\n\t\t}\r\n\t}\r\n\r\n\tasync function sendToServer(recording, username) {\r\n\t\tconst fileName = '60seconds-audio.mp3'\r\n\r\n\t\t// SO snippet\r\n\t\tlet blobToFile = function (blob, fileName) {\r\n\t\t\tconst file = new File([blob], fileName, { type: blob.type });\r\n\r\n\t\t\treturn file;\r\n\t\t}\r\n\r\n\t\t// Get URI of the recording\r\n\t\tlet audioURI = recording.getURI();\r\n\r\n\t\t// Convert URI to blob\r\n\t\tlet audioBlob = await fetch(audioURI).then(r => r.blob());\r\n\r\n\t\t// Convert blob to file\r\n\t\tlet audioFile = blobToFile(audioBlob, fileName);\r\n\r\n\t\tlet uploadData = new FormData();\r\n\t\tuploadData.append('username', username);\r\n\t\tuploadData.append('audio', audioFile);\r\n\r\n\t\tlet apiUploadPath = 'https://api.60seconds.io/api/upload';\r\n\t\taxios.post(apiUploadPath, uploadData);\r\n\t}\r\n\r\n\tasync function stopRecording() {\r\n\r\n\t\tlet updatedRecordings = [...recordings];\r\n\r\n\t\tconsole.log('Stopping recording..');\r\n\t\tsetRecording(undefined);\r\n\t\tawait recording.stopAndUnloadAsync();\r\n\t\tconst { sound, status } = await recording.createNewLoadedSoundAsync();\r\n\r\n\t\trecording.getStatusAsync()\r\n\t\t\t.then(function (result) {\r\n\t\t\t\tconsole.log(\"The duration is: \" + result.durationMillis)\r\n\t\t\t\tupdatedRecordings.push({\r\n\t\t\t\t\tsound: sound,\r\n\t\t\t\t\tduration: getDurationFormatted(result.durationMillis),\r\n\t\t\t\t\tfile: recording.getURI()\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch(failureCallback);\r\n\r\n\t\tfunction failureCallback(error) {\r\n\t\t\tconsole.error(\"Error generating audio file: \" + error);\r\n\t\t}\r\n\r\n\r\n\r\n\t\tsetRecordings(updatedRecordings);\r\n\r\n\r\n\t\tlet user = await axios.get('https://api.60seconds.io/api/user');\r\n\t\tsendToServer(recording, user.data.username);\r\n\t}\r\n\r\n\tfunction getDurationFormatted(millis) {\r\n\t\tconsole.log(\"FORMATTING...\" + millis);\r\n\t\tconst minutes = millis / 1000 / 60;\r\n\t\tconst minutesDisplay = Math.floor(minutes);\r\n\t\tconst seconds = Math.round((minutes - minutesDisplay) * 60);\r\n\t\tconst secondsDisplay = seconds < 10 ? `0${seconds}` : seconds;\r\n\t\tvar formattedDuration = `${minutesDisplay}:${secondsDisplay}`;\r\n\t\treturn formattedDuration;\r\n\t}\r\n\r\n\tfunction getRecordingLines() {\r\n\t\treturn recordings.map((recordingLine, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<View key={index} style={StyleSheet.row}>\r\n\t\t\t\t\t<Text style={styles.fill}>Recording {index + 1} - {recordingLine.duration}</Text>\r\n\t\t\t\t\t<Button style={styles.button} onPress={() => recordingLine.sound.replayAsync()} title=\"Play\"></Button>\r\n\t\t\t\t</View>\r\n\t\t\t);\r\n\t\t});\r\n\t}\r\n\r\n\tfunction startTranscribe() {\r\n\t\tvar transcription = '';\r\n\t}\r\n\r\n\treturn (\r\n\t\t<Container component=\"main\" maxWidth=\"sm\">\r\n\t\t\t<Box\r\n\t\t\t\tsx={{\r\n\t\t\t\t\tmarginTop: 8,\r\n\t\t\t\t\tdisplay: \"flex\",\r\n\t\t\t\t\tflexDirection: \"column\",\r\n\t\t\t\t\talignItems: \"center\",\r\n\t\t\t\t}}>\r\n\t\t\t\t<Button\r\n\t\t\t\t\ttitle={recording ? 'Stop Recording' : 'Start Recording'}\r\n\t\t\t\t\tonPress={recording ? stopRecording : startRecording}\r\n\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\tfullWidth\r\n\t\t\t\t\tvariant=\"contained\"\r\n\t\t\t\t\tsx={{ mt: 3, mb: 2 }}\r\n\t\t\t\t/>\r\n\t\t\t\t{getRecordingLines()}\r\n\t\t\t\t<h1>Text To Speech</h1>\r\n\t\t\t\t<div className='words' contentEditable>\r\n\t\t\t\t\t<p id='p'></p>\r\n\t\t\t\t</div>\r\n\t\t\t</Box>\r\n\t\t</Container>\r\n\r\n\t);\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n\tcontainer: {\r\n\t\tflex: 1,\r\n\t\tbackgroundColor: '#fff',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t},\r\n\trow: {\r\n\t\tflexDirection: 'row',\r\n\t\talignItems: 'center',\r\n\t\tjustifyContent: 'center',\r\n\t},\r\n\tfill: {\r\n\t\tflex: 1,\r\n\t\tmargin: 1,\r\n\t},\r\n\tbutton: {\r\n\t\tmargin: 16,\r\n\t}\r\n});\r\n"]},"metadata":{},"sourceType":"module"}