{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { Audio } from 'expo-av';\nimport * as React from 'react';\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport { Recording } from 'expo-av/build/Audio';\nimport { StatusBar } from 'expo-status-bar';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function recorder() {\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      recording = _React$useState2[0],\n      setRecording = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      recordings = _React$useState4[0],\n      setRecordings = _React$useState4[1];\n\n  function startRecording() {\n    var _await$Audio$Recordin, _recording;\n\n    return _regeneratorRuntime.async(function startRecording$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            console.log('Requesting permissions..');\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(Audio.requestPermissionsAsync());\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(Audio.setAudioModeAsync({\n              allowsRecordingIOS: true,\n              playsInSilentModeIOS: true\n            }));\n\n          case 6:\n            console.log('Starting recording..');\n            _context.next = 9;\n            return _regeneratorRuntime.awrap(Audio.Recording.createAsync(Audio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY));\n\n          case 9:\n            _await$Audio$Recordin = _context.sent;\n            _recording = _await$Audio$Recordin.recording;\n            setRecording(_recording);\n            console.log('Recording started');\n            _context.next = 18;\n            break;\n\n          case 15:\n            _context.prev = 15;\n            _context.t0 = _context[\"catch\"](0);\n            console.error('Failed to start recording', _context.t0);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 15]], Promise);\n  }\n\n  function stopRecording() {\n    var _await$recording$crea, sound, status, updatedRecordings, formRequest;\n\n    return _regeneratorRuntime.async(function stopRecording$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log('Stopping recording..');\n            setRecording(undefined);\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(recording.stopAndUnloadAsync());\n\n          case 4:\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(recording.createNewLoadedSoundAsync());\n\n          case 6:\n            _await$recording$crea = _context2.sent;\n            sound = _await$recording$crea.sound;\n            status = _await$recording$crea.status;\n            console.log(\"recording length: \" + status.durationMillis);\n            updatedRecordings = _toConsumableArray(recordings);\n            updatedRecordings.push({\n              sound: sound,\n              duration: getDurationFormatted(status.durationMillis),\n              file: recording.getURI()\n            });\n            setRecordings(updatedRecordings);\n            formRequest = new FormData();\n            formRequest.append('audio', {\n              uri: recording.getURI,\n              name: 'file.mp3',\n              type: 'audio/mp3'\n            });\n            formRequest.append('username', 'testRegister');\n            _context2.next = 18;\n            return _regeneratorRuntime.awrap(fetch('http://54.226.36.70/api/upload', {\n              method: 'POST',\n              body: formRequest\n            }).then(function (data) {\n              return console.log(data);\n            }).then(function (data) {\n              return console.log(data);\n            }).catch(function (error) {\n              console.log(error);\n            }));\n\n          case 18:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 19:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  function getDurationFormatted(millis) {\n    console.log(\"Millis is: \" + millis);\n    var minutes = millis / 1000 / 60;\n    var minutesDisplay = Math.floor(minutes);\n    var seconds = Math.round((minutes - minutesDisplay) * 60);\n    var secondsDisplay = seconds < 10 ? \"0\" + seconds : seconds;\n    return minutesDisplay + \":\" + secondsDisplay;\n  }\n\n  function getRecordingLines() {\n    return recordings.map(function (recordingLine, index) {\n      return _jsxs(View, {\n        style: StyleSheet.row,\n        children: [_jsxs(Text, {\n          style: styles.fill,\n          children: [\"Recording \", index + 1, \" - \", recordingLine.duration]\n        }), _jsx(Button, {\n          style: styles.button,\n          onPress: function onPress() {\n            return recordingLine.sound.replayAsync();\n          },\n          title: \"Play\"\n        })]\n      }, index);\n    });\n  }\n\n  return _jsx(Container, {\n    component: \"main\",\n    maxWidth: \"sm\",\n    children: _jsxs(Box, {\n      sx: {\n        marginTop: 8,\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\"\n      },\n      children: [_jsx(Button, {\n        title: recording ? 'Stop Recording' : 'Start Recording',\n        onPress: recording ? stopRecording : startRecording,\n        type: \"submit\",\n        fullWidth: true,\n        variant: \"contained\",\n        sx: {\n          mt: 3,\n          mb: 2\n        }\n      }), getRecordingLines()]\n    })\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  fill: {\n    flex: 1,\n    margin: 1\n  },\n  button: {\n    margin: 16\n  }\n});","map":{"version":3,"sources":["/home/ubuntu/project-60seconds/components/recorder.js"],"names":["Audio","React","Box","Container","Recording","StatusBar","recorder","useState","recording","setRecording","recordings","setRecordings","startRecording","console","log","requestPermissionsAsync","setAudioModeAsync","allowsRecordingIOS","playsInSilentModeIOS","createAsync","RECORDING_OPTIONS_PRESET_HIGH_QUALITY","error","stopRecording","undefined","stopAndUnloadAsync","createNewLoadedSoundAsync","sound","status","durationMillis","updatedRecordings","push","duration","getDurationFormatted","file","getURI","formRequest","FormData","append","uri","name","type","fetch","method","body","then","data","catch","millis","minutes","minutesDisplay","Math","floor","seconds","round","secondsDisplay","getRecordingLines","map","recordingLine","index","StyleSheet","row","styles","fill","button","replayAsync","marginTop","display","flexDirection","alignItems","mt","mb","create","container","flex","backgroundColor","justifyContent","margin"],"mappings":"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","sourcesContent":["import { Button, StyleSheet, Text, View } from 'react-native';\nimport { Audio } from 'expo-av';\nimport * as React from 'react';\nimport Box from \"@mui/material/Box\";\nimport Container from \"@mui/material/Container\";\nimport { Recording } from 'expo-av/build/Audio';\nimport { StatusBar } from 'expo-status-bar';\n\n\nexport default function recorder() {\n\n\tconst [recording, setRecording] = React.useState();\n\tconst [recordings, setRecordings] = React.useState([]);\n\n\tasync function startRecording() {\n\t\ttry {\n\t\tconsole.log('Requesting permissions..');\n\t\tawait Audio.requestPermissionsAsync();\n\t\tawait Audio.setAudioModeAsync({\n\t\t\tallowsRecordingIOS: true,\n\t\t\tplaysInSilentModeIOS: true,\n\t\t}); \n\t\tconsole.log('Starting recording..');\n\t\tconst { recording } = await Audio.Recording.createAsync(\n\t\t\tAudio.RECORDING_OPTIONS_PRESET_HIGH_QUALITY\n\t\t);\n\t\tsetRecording(recording);\n\t\tconsole.log('Recording started');\n\t\t} catch (err) {\n\t\tconsole.error('Failed to start recording', err);\n\t\t}\n\t}\n\n\tasync function stopRecording() {\n\t\tconsole.log('Stopping recording..');\n\t\tsetRecording(undefined);\n\t\tawait recording.stopAndUnloadAsync();\n\t\tconst { sound, status } = await recording.createNewLoadedSoundAsync();\n\t\tconsole.log(\"recording length: \" + status.durationMillis);\n\n\t\tlet updatedRecordings = [...recordings];\n\t\t\n\t\tupdatedRecordings.push({\n\t\t\tsound: sound,\n\t\t\tduration: getDurationFormatted(status.durationMillis),\n\t\t\tfile: recording.getURI()\n\t\t});\n\n\t\tsetRecordings(updatedRecordings);\n\n\t\t\n\t\tlet formRequest = new FormData();\n\t\tformRequest.append('audio', {\n\t\t\turi: recording.getURI,\n\t\t\tname: 'file.mp3',\n\t\t\ttype: 'audio/mp3'\n\t\t})\n\t\tformRequest.append('username', 'testRegister');\n\n\t\treturn await fetch('http://54.226.36.70/api/upload', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: formRequest,\n\t\t\t\n\t\t  }).then(data => console.log(data)).then(data => console.log(data))\n\t\t  .catch((error) => {\n\t\t\t  console.log(error);\n\t\t  });\n\n\t\t  /*axios.post('http://54.226.36.70/api/upload', {\n\t\t\turi: recording.getURI,\n\t\t\tname: 'file.mp3',\n\t\t\ttype: 'audio/mp3'\n\t\t  })\n\t\t  .then(function (response) {\n\t\t\tconsole.log(response);\n\t\t  })\n\t\t  .catch(function (error) {\n\t\t\tconsole.log(error);\n\t\t  });*/\n\n\n\t}\n\n\tfunction getDurationFormatted(millis) {\n\t\tconsole.log(\"Millis is: \" + millis);\n\t\tconst minutes = millis / 1000 / 60;\n\t\tconst minutesDisplay = Math.floor(minutes);\n\t\tconst seconds = Math.round((minutes - minutesDisplay) * 60);\n\t\tconst secondsDisplay = seconds < 10 ? `0${seconds}` : seconds;\n\t\treturn `${minutesDisplay}:${secondsDisplay}`;\n\t}\n\n\tfunction getRecordingLines() {\n\t\treturn recordings.map((recordingLine, index) => {\n\t\t\treturn (\n\t\t\t\t<View key={index} style={StyleSheet.row}>\n\t\t\t\t\t<Text style={styles.fill}>Recording {index+1} - {recordingLine.duration}</Text>\n\t\t\t\t\t<Button style={styles.button} onPress={() => recordingLine.sound.replayAsync()} title=\"Play\"></Button>\n\t\t\t\t</View>\n\t\t\t);\n\t\t});\n\t}\n\n\treturn (\n\t\t<Container component=\"main\" maxWidth=\"sm\">\n\t\t\t<Box\n\t\t\t\tsx={{\n\t\t\t\t\tmarginTop: 8,\n\t\t\t\t\tdisplay: \"flex\",\n\t\t\t\t\tflexDirection: \"column\",\n\t\t\t\t\talignItems: \"center\",\n\t\t\t\t}}>\n\t\t\t\t<Button\n\t\t\t\t\ttitle={recording ? 'Stop Recording' : 'Start Recording'}\n\t\t\t\t\tonPress={recording ? stopRecording : startRecording}\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tfullWidth\n\t\t\t\t\tvariant=\"contained\"\n\t\t\t\t\tsx={{ mt: 3, mb: 2 }}\n\t\t\t\t/>\n\t\t\t\t{getRecordingLines()}\n\t\t\t</Box>\n\t\t</Container>\n\t\t\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\trow: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tfill: {\n\t\tflex: 1,\n\t\tmargin: 1,\n\t},\n\tbutton: {\n\t\tmargin: 16,\n\t}\n});"]},"metadata":{},"sourceType":"module"}