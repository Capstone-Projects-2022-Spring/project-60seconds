{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport styles from \"../App.style\";\nimport { Audio } from 'expo-av';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function playButton(_ref) {\n  var parentToChild2 = _ref.parentToChild2;\n\n  var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      sound = _React$useState2[0],\n      setSound = _React$useState2[1];\n\n  function playSound() {\n    var _await$Audio$Sound$cr, sound;\n\n    return _regeneratorRuntime.async(function playSound$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Audio.Sound.createAsync(parentToChild2));\n\n          case 2:\n            _await$Audio$Sound$cr = _context.sent;\n            sound = _await$Audio$Sound$cr.sound;\n            setSound(sound);\n            _context.next = 7;\n            return _regeneratorRuntime.awrap(sound.playAsync());\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n\n  React.useEffect(function () {\n    return sound ? function () {\n      sound.unloadAsync();\n    } : undefined;\n  }, [sound]);\n\n  if (parentToChild2.includes(\"http\")) {\n    return _jsx(Button, {\n      title: \"Play Sound\",\n      onPress: playSound\n    });\n  } else {\n    return _jsx(\"p\", {\n      children: parentToChild2\n    });\n  }\n}","map":{"version":3,"sources":["C:/Users/Sam Sepial/WebstormProjects/project-60seconds/components/playbutton.js"],"names":["React","useState","styles","Audio","playButton","parentToChild2","sound","setSound","playSound","Sound","createAsync","playAsync","useEffect","unloadAsync","undefined","includes"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;;;AAEA,OAAOC,MAAP;AACA,SAASC,KAAT,QAAuB,SAAvB;;AAEA,eAAe,SAASC,UAAT,OAAqC;AAAA,MAAhBC,cAAgB,QAAhBA,cAAgB;;AAEhD,wBAA0BL,KAAK,CAACC,QAAN,EAA1B;AAAA;AAAA,MAAOK,KAAP;AAAA,MAAcC,QAAd;;AAEA,WAAeC,SAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAE0BL,KAAK,CAACM,KAAN,CAAYC,WAAZ,CAAwBL,cAAxB,CAF1B;;AAAA;AAAA;AAEUC,YAAAA,KAFV,yBAEUA,KAFV;AAGEC,YAAAA,QAAQ,CAACD,KAAD,CAAR;AAHF;AAAA,6CAMQA,KAAK,CAACK,SAAN,EANR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAM;AACpB,WAAON,KAAK,GACR,YAAM;AAEJA,MAAAA,KAAK,CAACO,WAAN;AAAsB,KAHhB,GAIRC,SAJJ;AAKD,GAND,EAMG,CAACR,KAAD,CANH;;AASA,MAAGD,cAAc,CAACU,QAAf,CAAwB,MAAxB,CAAH,EAAmC;AAE/B,WACI,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,YAAd;AAA2B,MAAA,OAAO,EAAEP;AAApC,MADJ;AAGH,GALD,MAKO;AACH,WACI;AAAA,gBAAIH;AAAJ,MADJ;AAGH;AAEJ","sourcesContent":["import React, {useState} from \"react\";\r\nimport { View, Button } from 'react-native';\r\nimport styles from '../App.style';\r\nimport { Audio }  from 'expo-av';\r\n\r\nexport default function playButton({parentToChild2}){\r\n    \r\n    const [sound, setSound] = React.useState();\r\n\r\n    async function playSound() {\r\n      //console.log('Loading Sound');\r\n      const { sound } = await Audio.Sound.createAsync(parentToChild2);\r\n      setSound(sound);\r\n  \r\n      //console.log('Playing Sound');\r\n      await sound.playAsync(); }\r\n  \r\n    React.useEffect(() => {\r\n      return sound\r\n        ? () => {\r\n            //console.log('Unloading Sound');\r\n            sound.unloadAsync(); }\r\n        : undefined;\r\n    }, [sound]);\r\n  \r\n    // if the data sent from the day component is a link, display button. else, display text.\r\n    if(parentToChild2.includes(\"http\")){\r\n        //console.log(\"true link\")\r\n        return (\r\n            <Button title=\"Play Sound\" onPress={playSound} />\r\n        );\r\n    } else {\r\n        return(\r\n            <p>{parentToChild2}</p>\r\n        )\r\n    }\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}